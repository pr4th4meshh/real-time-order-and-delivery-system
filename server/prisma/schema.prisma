// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

model User {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String  @unique
  passwordHash String
  role         Role    @default(customer)
  orders       Order[] @relation("CustomerOrders")
  deliveries   Order[] @relation("PartnerDeliveries")
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  customer   User        @relation("CustomerOrders", fields: [customerId], references: [id])
  customerId String      @db.ObjectId
  items      Item[]
  status     OrderStatus @default(placed)
  partner    User?       @relation("PartnerDeliveries", fields: [partnerId], references: [id])
  partnerId  String?     @db.ObjectId
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Product {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  imageUrl    String?
  qty         Int
  items       Item[]  @relation("ProductItems")
}

enum Role {
  customer
  partner
  admin
}

model Item {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation("ProductItems", fields: [productId], references: [id])
  qty       Int
}

enum OrderStatus {
  placed
  accepted
  picked
  delivered
}
